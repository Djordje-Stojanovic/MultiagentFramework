# Pydantic Settings

## BaseSettings ¶

```
BaseSettings(
__pydantic_self__,
_case_sensitive: bool | None = None,
_nested_model_default_partial_update: (
bool | None
) = None,
_env_prefix: str | None = None,
_env_file: DotenvType | None = ENV_FILE_SENTINEL,
_env_file_encoding: str | None = None,
_env_ignore_empty: bool | None = None,
_env_nested_delimiter: str | None = None,
_env_parse_none_str: str | None = None,
_env_parse_enums: bool | None = None,
_cli_prog_name: str | None = None,
_cli_parse_args: (
bool | list[str] | tuple[str, ...] | None
) = None,
_cli_settings_source: (
CliSettingsSource[Any] | None
) = None,
_cli_parse_none_str: str | None = None,
_cli_hide_none_type: bool | None = None,
_cli_avoid_json: bool | None = None,
_cli_enforce_required: bool | None = None,
_cli_use_class_docs_for_groups: bool | None = None,
_cli_exit_on_error: bool | None = None,
_cli_prefix: str | None = None,
_cli_flag_prefix_char: str | None = None,
_cli_implicit_flags: bool | None = None,
_cli_ignore_unknown_args: bool | None = None,
_cli_kebab_case: bool | None = None,
_secrets_dir: PathType | None = None,
**values: Any
)
```


Bases: `BaseModel`


Base class for settings, allowing values to be overridden by environment variables.

This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design.

All the below attributes can be set via `model_config`

.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`_case_sensitive`
|
`bool | None`
|
Whether environment and CLI variable names should be read with case-sensitivity.
Defaults to |
`None`
|
`_nested_model_default_partial_update`
|
`bool | None`
|
Whether to allow partial updates on nested model default object fields.
Defaults to |
`None`
|
`_env_prefix`
|
`str | None`
|
Prefix for all environment variables. Defaults to |
`None`
|
`_env_file`
|
`DotenvType | None`
|
The env file(s) to load settings values from. Defaults to |
`ENV_FILE_SENTINEL`
|
`_env_file_encoding`
|
`str | None`
|
The env file encoding, e.g. |
`None`
|
`_env_ignore_empty`
|
`bool | None`
|
Ignore environment variables where the value is an empty string. Default to |
`None`
|
`_env_nested_delimiter`
|
`str | None`
|
The nested env values delimiter. Defaults to |
`None`
|
`_env_parse_none_str`
|
`str | None`
|
The env string value that should be parsed (e.g. "null", "void", "None", etc.)
into |
`None`
|
`_env_parse_enums`
|
`bool | None`
|
Parse enum field names to values. Defaults to |
`None`
|
`_cli_prog_name`
|
`str | None`
|
The CLI program name to display in help text. Defaults to |
`None`
|
`_cli_parse_args`
|
`bool | list[str] | tuple[str, ...] | None`
|
The list of CLI arguments to parse. Defaults to None.
If set to |
`None`
|
`_cli_settings_source`
|
`CliSettingsSource[Any] | None`
|
Override the default CLI settings source with a user defined instance. Defaults to None. |
`None`
|
`_cli_parse_none_str`
|
`str | None`
|
The CLI string value that should be parsed (e.g. "null", "void", "None", etc.) into
|
`None`
|
`_cli_hide_none_type`
|
`bool | None`
|
Hide |
`None`
|
`_cli_avoid_json`
|
`bool | None`
|
Avoid complex JSON objects in CLI help text. Defaults to |
`None`
|
`_cli_enforce_required`
|
`bool | None`
|
Enforce required fields at the CLI. Defaults to |
`None`
|
`_cli_use_class_docs_for_groups`
|
`bool | None`
|
Use class docstrings in CLI group help text instead of field descriptions.
Defaults to |
`None`
|
`_cli_exit_on_error`
|
`bool | None`
|
Determines whether or not the internal parser exits with error info when an error occurs.
Defaults to |
`None`
|
`_cli_prefix`
|
`str | None`
|
The root parser command line arguments prefix. Defaults to "". |
`None`
|
`_cli_flag_prefix_char`
|
`str | None`
|
The flag prefix character to use for CLI optional arguments. Defaults to '-'. |
`None`
|
`_cli_implicit_flags`
|
`bool | None`
|
Whether |
`None`
|
`_cli_ignore_unknown_args`
|
`bool | None`
|
Whether to ignore unknown CLI args and parse only known ones. Defaults to |
`None`
|
`_cli_kebab_case`
|
`bool | None`
|
CLI args use kebab case. Defaults to |
`None`
|
`_secrets_dir`
|
`PathType | None`
|
The secret files directory or a sequence of directories. Defaults to |
`None`
|

## Source code in `pydantic_settings/main.py`


142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 |
|

###
settings_customise_sources
`classmethod`

¶

```
settings_customise_sources(
settings_cls: type[BaseSettings],
init_settings: PydanticBaseSettingsSource,
env_settings: PydanticBaseSettingsSource,
dotenv_settings: PydanticBaseSettingsSource,
file_secret_settings: PydanticBaseSettingsSource,
) -> tuple[PydanticBaseSettingsSource, ...]
```


Define the sources and their order for loading the settings values.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`settings_cls`
|
`type[BaseSettings]`
|
The Settings class. |
required
|
`init_settings`
|
`PydanticBaseSettingsSource`
|
The |
required
|
`env_settings`
|
`PydanticBaseSettingsSource`
|
The |
required
|
`dotenv_settings`
|
`PydanticBaseSettingsSource`
|
The |
required
|
`file_secret_settings`
|
`PydanticBaseSettingsSource`
|
The |
required
|

Returns:

| Type | Description |
|---|---|
`tuple[PydanticBaseSettingsSource, ...]`
|
A tuple containing the sources and their order for loading the settings values. |

## Source code in `pydantic_settings/main.py`


201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 |
|

## CliApp ¶

A utility class for running Pydantic `BaseSettings`

, `BaseModel`

, or `pydantic.dataclasses.dataclass`

as
CLI applications.

###
run
`staticmethod`

¶

```
run(
model_cls: type[T],
cli_args: (
list[str]
| Namespace
| SimpleNamespace
| dict[str, Any]
| None
) = None,
cli_settings_source: (
CliSettingsSource[Any] | None
) = None,
cli_exit_on_error: bool | None = None,
cli_cmd_method_name: str = "cli_cmd",
**model_init_data: Any
) -> T
```


Runs a Pydantic `BaseSettings`

, `BaseModel`

, or `pydantic.dataclasses.dataclass`

as a CLI application.
Running a model as a CLI application requires the `cli_cmd`

method to be defined in the model class.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`model_cls`
|
`type[T]`
|
The model class to run as a CLI application. |
required
|
`cli_args`
|
`list[str] | Namespace | SimpleNamespace | dict[str, Any] | None`
|
The list of CLI arguments to parse. If |
`None`
|
`cli_settings_source`
|
`CliSettingsSource[Any] | None`
|
Override the default CLI settings source with a user defined instance.
Defaults to |
`None`
|
`cli_exit_on_error`
|
`bool | None`
|
Determines whether this function exits on error. If model is subclass of
|
`None`
|
`cli_cmd_method_name`
|
`str`
|
The CLI command method name to run. Defaults to "cli_cmd". |
`'cli_cmd'`
|
`model_init_data`
|
`Any`
|
The model init data. |
`{}`
|

Returns:

| Type | Description |
|---|---|
`T`
|
The ran instance of model. |

Raises:

| Type | Description |
|---|---|
`SettingsError`
|
If model_cls is not subclass of |
`SettingsError`
|
If model_cls does not have a |

## Source code in `pydantic_settings/main.py`


455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 |
|

###
run_subcommand
`staticmethod`

¶

```
run_subcommand(
model: PydanticModel,
cli_exit_on_error: bool | None = None,
cli_cmd_method_name: str = "cli_cmd",
) -> PydanticModel
```


Runs the model subcommand. Running a model subcommand requires the `cli_cmd`

method to be defined in
the nested model subcommand class.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`model`
|
`PydanticModel`
|
The model to run the subcommand from. |
required
|
`cli_exit_on_error`
|
`bool | None`
|
Determines whether this function exits with error if no subcommand is found.
Defaults to model_config |
`None`
|
`cli_cmd_method_name`
|
`str`
|
The CLI command method name to run. Defaults to "cli_cmd". |
`'cli_cmd'`
|

Returns:

| Type | Description |
|---|---|
`PydanticModel`
|
The ran subcommand model. |

Raises:

| Type | Description |
|---|---|
`SystemExit`
|
When no subcommand is found and cli_exit_on_error= |
`SettingsError`
|
When no subcommand is found and cli_exit_on_error= |

## Source code in `pydantic_settings/main.py`


526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 |
|

## SettingsConfigDict ¶

Bases: `ConfigDict`


###
pyproject_toml_depth
`instance-attribute`

¶

```
pyproject_toml_depth: int
```


Number of levels **up** from the current working directory to attempt to find a pyproject.toml
file.

This is only used when a pyproject.toml file is not found in the current working directory.

###
pyproject_toml_table_header
`instance-attribute`

¶

Header of the TOML table within a pyproject.toml file to use when filling variables.
This is supplied as a `tuple[str, ...]`

instead of a `str`

to accommodate for headers
containing a `.`

.

For example, `toml_table_header = ("tool", "my.tool", "foo")`

can be used to fill variable
values from a table with header `[tool."my.tool".foo]`

.

To use the root table, exclude this config setting or provide an empty tuple.

## CliSettingsSource ¶

```
CliSettingsSource(
settings_cls: type[BaseSettings],
cli_prog_name: str | None = None,
cli_parse_args: (
bool | list[str] | tuple[str, ...] | None
) = None,
cli_parse_none_str: str | None = None,
cli_hide_none_type: bool | None = None,
cli_avoid_json: bool | None = None,
cli_enforce_required: bool | None = None,
cli_use_class_docs_for_groups: bool | None = None,
cli_exit_on_error: bool | None = None,
cli_prefix: str | None = None,
cli_flag_prefix_char: str | None = None,
cli_implicit_flags: bool | None = None,
cli_ignore_unknown_args: bool | None = None,
cli_kebab_case: bool | None = None,
case_sensitive: bool | None = True,
root_parser: Any = None,
parse_args_method: Callable[..., Any] | None = None,
add_argument_method: (
Callable[..., Any] | None
) = add_argument,
add_argument_group_method: (
Callable[..., Any] | None
) = add_argument_group,
add_parser_method: (
Callable[..., Any] | None
) = add_parser,
add_subparsers_method: (
Callable[..., Any] | None
) = add_subparsers,
formatter_class: Any = RawDescriptionHelpFormatter,
)
```


Bases: `EnvSettingsSource`

, `Generic[T]`


Source class for loading settings values from CLI.

## Note

A `CliSettingsSource`

connects with a `root_parser`

object by using the parser methods to add
`settings_cls`

fields as command line arguments. The `CliSettingsSource`

internal parser representation
is based upon the `argparse`

parsing library, and therefore, requires the parser methods to support
the same attributes as their `argparse`

library counterparts.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`cli_prog_name`
|
`str | None`
|
The CLI program name to display in help text. Defaults to |
`None`
|
`cli_parse_args`
|
`bool | list[str] | tuple[str, ...] | None`
|
The list of CLI arguments to parse. Defaults to None.
If set to |
`None`
|
`cli_parse_none_str`
|
`str | None`
|
The CLI string value that should be parsed (e.g. "null", "void", "None", etc.) into |
`None`
|
`cli_hide_none_type`
|
`bool | None`
|
Hide |
`None`
|
`cli_avoid_json`
|
`bool | None`
|
Avoid complex JSON objects in CLI help text. Defaults to |
`None`
|
`cli_enforce_required`
|
`bool | None`
|
Enforce required fields at the CLI. Defaults to |
`None`
|
`cli_use_class_docs_for_groups`
|
`bool | None`
|
Use class docstrings in CLI group help text instead of field descriptions.
Defaults to |
`None`
|
`cli_exit_on_error`
|
`bool | None`
|
Determines whether or not the internal parser exits with error info when an error occurs.
Defaults to |
`None`
|
`cli_prefix`
|
`str | None`
|
Prefix for command line arguments added under the root parser. Defaults to "". |
`None`
|
`cli_flag_prefix_char`
|
`str | None`
|
The flag prefix character to use for CLI optional arguments. Defaults to '-'. |
`None`
|
`cli_implicit_flags`
|
`bool | None`
|
Whether |
`None`
|
`cli_ignore_unknown_args`
|
`bool | None`
|
Whether to ignore unknown CLI args and parse only known ones. Defaults to |
`None`
|
`cli_kebab_case`
|
`bool | None`
|
CLI args use kebab case. Defaults to |
`None`
|
`case_sensitive`
|
`bool | None`
|
Whether CLI "--arg" names should be read with case-sensitivity. Defaults to |
`True`
|
`root_parser`
|
`Any`
|
The root parser object. |
`None`
|
`parse_args_method`
|
`Callable[..., Any] | None`
|
The root parser parse args method. Defaults to |
`None`
|
`add_argument_method`
|
`Callable[..., Any] | None`
|
The root parser add argument method. Defaults to |
`add_argument`
|
`add_argument_group_method`
|
`Callable[..., Any] | None`
|
The root parser add argument group method.
Defaults to |
`add_argument_group`
|
`add_parser_method`
|
`Callable[..., Any] | None`
|
The root parser add new parser (sub-command) method.
Defaults to |
`add_parser`
|
`add_subparsers_method`
|
`Callable[..., Any] | None`
|
The root parser add subparsers (sub-commands) method.
Defaults to |
`add_subparsers`
|
`formatter_class`
|
`Any`
|
A class for customizing the root parser help text. Defaults to |
`RawDescriptionHelpFormatter`
|

## Source code in `pydantic_settings/sources.py`


1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 |
|

## DotEnvSettingsSource ¶

```
DotEnvSettingsSource(
settings_cls: type[BaseSettings],
env_file: DotenvType | None = ENV_FILE_SENTINEL,
env_file_encoding: str | None = None,
case_sensitive: bool | None = None,
env_prefix: str | None = None,
env_nested_delimiter: str | None = None,
env_ignore_empty: bool | None = None,
env_parse_none_str: str | None = None,
env_parse_enums: bool | None = None,
)
```


Bases: `EnvSettingsSource`


Source class for loading settings values from env files.

## Source code in `pydantic_settings/sources.py`


959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 |
|

## EnvSettingsSource ¶

```
EnvSettingsSource(
settings_cls: type[BaseSettings],
case_sensitive: bool | None = None,
env_prefix: str | None = None,
env_nested_delimiter: str | None = None,
env_ignore_empty: bool | None = None,
env_parse_none_str: str | None = None,
env_parse_enums: bool | None = None,
)
```


Bases: `PydanticBaseEnvSettingsSource`


Source class for loading settings values from environment variables.

## Source code in `pydantic_settings/sources.py`


732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 |
|

### get_field_value ¶

Gets the value for field from environment variables and a flag to determine whether value is complex.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo`
|
The field. |
required
|
`field_name`
|
`str`
|
The field name. |
required
|

Returns:

| Type | Description |
|---|---|
`tuple[Any, str, bool]`
|
A tuple that contains the value ( |

## Source code in `pydantic_settings/sources.py`


755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 |
|

### prepare_field_value ¶

```
prepare_field_value(
field_name: str,
field: FieldInfo,
value: Any,
value_is_complex: bool,
) -> Any
```


Prepare value for the field.

- Extract value for nested field.
- Deserialize value to python object for complex field.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo`
|
The field. |
required
|
`field_name`
|
`str`
|
The field name. |
required
|

Returns:

| Type | Description |
|---|---|
`Any`
|
A tuple contains prepared value for the field. |

Raises:

| Type | Description |
|---|---|
`ValuesError`
|
When There is an error in deserializing value for complex field. |

## Source code in `pydantic_settings/sources.py`


776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 |
|

### next_field ¶

```
next_field(
field: FieldInfo | Any | None,
key: str,
case_sensitive: bool | None = None,
) -> FieldInfo | None
```


Find the field in a sub model by key(env name)

By having the following models:

```
```py
class SubSubModel(BaseSettings):
dvals: Dict
class SubModel(BaseSettings):
vals: list[str]
sub_sub_model: SubSubModel
class Cfg(BaseSettings):
sub_model: SubModel
```
```


## Then

next_field(sub_model, 'vals') Returns the `vals`

field of `SubModel`

class
next_field(sub_model, 'sub_sub_model') Returns `sub_sub_model`

field of `SubModel`

class

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo | Any | None`
|
The field. |
required
|
`key`
|
`str`
|
The key (env name). |
required
|
`case_sensitive`
|
`bool | None`
|
Whether to search for key case sensitively. |
`None`
|

Returns:

| Type | Description |
|---|---|
`FieldInfo | None`
|
Field if it finds the next field otherwise |

## Source code in `pydantic_settings/sources.py`


838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 |
|

### explode_env_vars ¶

```
explode_env_vars(
field_name: str,
field: FieldInfo,
env_vars: Mapping[str, str | None],
) -> dict[str, Any]
```


Process env_vars and extract the values of keys containing env_nested_delimiter into nested dictionaries.

This is applied to a single field, hence filtering by env_var prefix.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field_name`
|
`str`
|
The field name. |
required
|
`field`
|
`FieldInfo`
|
The field. |
required
|
`env_vars`
|
`Mapping[str, str | None]`
|
Environment variables. |
required
|

Returns:

| Type | Description |
|---|---|
`dict[str, Any]`
|
A dictionary contains extracted values from nested env values. |

## Source code in `pydantic_settings/sources.py`


892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 |
|

## ForceDecode ¶

Annotation to force decoding of a field value.

## InitSettingsSource ¶

```
InitSettingsSource(
settings_cls: type[BaseSettings],
init_kwargs: dict[str, Any],
nested_model_default_partial_update: bool | None = None,
)
```


Bases: `PydanticBaseSettingsSource`


Source class for loading values provided during settings class initialization.

## Source code in `pydantic_settings/sources.py`


385 386 387 388 389 390 391 392 393 394 395 396 397 |
|

## JsonConfigSettingsSource ¶

```
JsonConfigSettingsSource(
settings_cls: type[BaseSettings],
json_file: PathType | None = DEFAULT_PATH,
json_file_encoding: str | None = None,
)
```


Bases: `InitSettingsSource`

, `ConfigFileSourceMixin`


A source class that loads variables from a JSON file

## Source code in `pydantic_settings/sources.py`


2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 |
|

## NoDecode ¶

Annotation to prevent decoding of a field value.

## PydanticBaseSettingsSource ¶

```
PydanticBaseSettingsSource(
settings_cls: type[BaseSettings],
)
```


Bases: `ABC`


Abstract base class for settings sources, every settings source classes should inherit from it.

## Source code in `pydantic_settings/sources.py`


236 237 238 239 240 |
|

###
current_state
`property`

¶

The current state of the settings, populated by the previous settings sources.

###
settings_sources_data
`property`

¶

The state of all previous settings sources.

###
get_field_value
`abstractmethod`

¶

Gets the value, the key for model creation, and a flag to determine whether value is complex.

This is an abstract method that should be overridden in every settings source classes.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo`
|
The field. |
required
|
`field_name`
|
`str`
|
The field name. |
required
|

Returns:

| Type | Description |
|---|---|
`tuple[Any, str, bool]`
|
A tuple that contains the value, key and a flag to determine whether value is complex. |

## Source code in `pydantic_settings/sources.py`


270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 |
|

### field_is_complex ¶

Checks whether a field is complex, in which case it will attempt to be parsed as JSON.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo`
|
The field. |
required
|

Returns:

| Type | Description |
|---|---|
`bool`
|
Whether the field is complex. |

## Source code in `pydantic_settings/sources.py`


286 287 288 289 290 291 292 293 294 295 296 |
|

### prepare_field_value ¶

```
prepare_field_value(
field_name: str,
field: FieldInfo,
value: Any,
value_is_complex: bool,
) -> Any
```


Prepares the value of a field.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field_name`
|
`str`
|
The field name. |
required
|
`field`
|
`FieldInfo`
|
The field. |
required
|
`value`
|
`Any`
|
The value of the field that has to be prepared. |
required
|
`value_is_complex`
|
`bool`
|
A flag to determine whether value is complex. |
required
|

Returns:

| Type | Description |
|---|---|
`Any`
|
The prepared value. |

## Source code in `pydantic_settings/sources.py`


298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 |
|

### decode_complex_value ¶

Decode the value for a complex field

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field_name`
|
`str`
|
The field name. |
required
|
`field`
|
`FieldInfo`
|
The field. |
required
|
`value`
|
`Any`
|
The value of the field that has to be prepared. |
required
|

Returns:

| Type | Description |
|---|---|
`Any`
|
The decoded value for further preparation |

## Source code in `pydantic_settings/sources.py`


315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 |
|

## PyprojectTomlConfigSettingsSource ¶

```
PyprojectTomlConfigSettingsSource(
settings_cls: type[BaseSettings],
toml_file: Path | None = None,
)
```


Bases: `TomlConfigSettingsSource`


A source class that loads variables from a `pyproject.toml`

file.

## Source code in `pydantic_settings/sources.py`


2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 |
|

## SecretsSettingsSource ¶

```
SecretsSettingsSource(
settings_cls: type[BaseSettings],
secrets_dir: PathType | None = None,
case_sensitive: bool | None = None,
env_prefix: str | None = None,
env_ignore_empty: bool | None = None,
env_parse_none_str: str | None = None,
env_parse_enums: bool | None = None,
)
```


Bases: `PydanticBaseEnvSettingsSource`


Source class for loading settings values from secret files.

## Source code in `pydantic_settings/sources.py`


629 630 631 632 633 634 635 636 637 638 639 640 641 642 |
|

###
find_case_path
`classmethod`

¶

Find a file within path's directory matching filename, optionally ignoring case.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`dir_path`
|
`Path`
|
Directory path. |
required
|
`file_name`
|
`str`
|
File name. |
required
|
`case_sensitive`
|
`bool`
|
Whether to search for file name case sensitively. |
required
|

Returns:

| Type | Description |
|---|---|
`Path | None`
|
Whether file path or |

## Source code in `pydantic_settings/sources.py`


672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 |
|

### get_field_value ¶

Gets the value for field from secret file and a flag to determine whether value is complex.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`field`
|
`FieldInfo`
|
The field. |
required
|
`field_name`
|
`str`
|
The field name. |
required
|

Returns:

| Type | Description |
|---|---|
`tuple[Any, str, bool]`
|
A tuple that contains the value ( |

## Source code in `pydantic_settings/sources.py`


692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 |
|

## TomlConfigSettingsSource ¶

```
TomlConfigSettingsSource(
settings_cls: type[BaseSettings],
toml_file: PathType | None = DEFAULT_PATH,
)
```


Bases: `InitSettingsSource`

, `ConfigFileSourceMixin`


A source class that loads variables from a TOML file

## Source code in `pydantic_settings/sources.py`


2043 2044 2045 2046 2047 2048 2049 2050 |
|

## YamlConfigSettingsSource ¶

```
YamlConfigSettingsSource(
settings_cls: type[BaseSettings],
yaml_file: PathType | None = DEFAULT_PATH,
yaml_file_encoding: str | None = None,
)
```


Bases: `InitSettingsSource`

, `ConfigFileSourceMixin`


A source class that loads variables from a yaml file

## Source code in `pydantic_settings/sources.py`


2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 |
|

## get_subcommand ¶

```
get_subcommand(
model: PydanticModel,
is_required: bool = True,
cli_exit_on_error: bool | None = None,
) -> Optional[PydanticModel]
```


Get the subcommand from a model.

Parameters:

| Name | Type | Description | Default |
|---|---|---|---|
`model`
|
`PydanticModel`
|
The model to get the subcommand from. |
required
|
`is_required`
|
`bool`
|
Determines whether a model must have subcommand set and raises error if not
found. Defaults to |
`True`
|
`cli_exit_on_error`
|
`bool | None`
|
Determines whether this function exits with error if no subcommand is found.
Defaults to model_config |
`None`
|

Returns:

| Type | Description |
|---|---|
`Optional[PydanticModel]`
|
The subcommand model if found, otherwise |

Raises:

| Type | Description |
|---|---|
`SystemExit`
|
When no subcommand is found and is_required= |
`SettingsError`
|
When no subcommand is found and is_required= |

## Source code in `pydantic_settings/sources.py`


178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 |
|